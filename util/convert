#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015‚Äì2024 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see https://www.gnu.org/licenses/
#
# The author of COùòïCEPT can be contacted at dakin(at)phys.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This utility can convert between different types of snapshots,
# and even make changes to the global parameters and component attributes.



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c() {
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit ${exit_code}
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
argparse_finished="False"
argparse_exit_code=""
args=$("${python}" -B -c "
import argparse, sys
# Setup command-line arguments
parser = argparse.ArgumentParser(
    prog='$(basename "${this_file}")',
    description='run the ${esc_concept} $(basename "${this_file}") utility',
)
parser.add_argument(
    'paths',
    nargs='+',
    help='path to snapshot or directory of snapshots',
)
parser.add_argument(
    'attributes',
    nargs='*',
    help='space-separated list of global parameters and component attributes',
)
parser.add_argument(
    '-y', '--yes-to-defaults',
    default=False,
    action='store_true',
    help='accept default options on future queries',
)
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# Reset stdout
sys.stdout = stdout
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=True')
# Because multiple paths and multiple attributes can be given,
# these are parsed as a single argument type, for now.
print(
    'paths_and_attributes=({})'
    .format(
        ' '.join([
            '\"{}\"'.format(path_or_attribute)
            for path_or_attribute in (args.paths + args.attributes)
        ])
    )
)
print('yes_to_defaults=\"{}\"'.format(args.yes_to_defaults))
" "$@" || echo "argparse_exit_code=$?")
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "True" ]; then
    if [ -z "${argparse_exit_code}" ]; then
        argparse_exit_code=0
    fi
    if [ ${argparse_exit_code} -eq 0 ]; then
        trap : 0
    fi
    exit ${argparse_exit_code}
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" -u="${this_file}" "$@"
    trap : 0
    exit 0
fi

# Split the paths_and_attributes array up into two separate arrays,
# one for paths and one for attributes. A path_or_attribute is
# counted as a path if the path exists.
paths=()
attributes=()
for path_or_attribute in "${paths_and_attributes[@]}"; do
    # Convert to absolute path
    path="$(absolute_path "${path_or_attribute}" "${workdir}")"
    if [ -e "${path}" ]; then
        paths=("${paths[@]}" "${path}")
    else
        attributes=("${attributes[@]}" "${path_or_attribute}")
    fi
done

# Exit if none of the supplied paths exist
if [ ${#paths[@]} -eq 0 ]; then
    colorprint "No path supplied or the supplied path does not exist" "red"
    exit 1
fi

# Convert the given snapshot(s)
launch_utility             \
    "A converted snapshot" \
    "Converted snapshots"  \
    "${yes_to_defaults}"   \
    "
# The special_params dict, specifying details of the utility run
special_params = {
    'special'   : '$(basename "${this_file}")',
    'attributes': $(bash_array2python_list "${attributes[@]}"),
}
"                          \
    ""                     \
    "${paths[@]}"

# Cleanup and graceful exit
cleanup_empty_tmp
trap : 0

