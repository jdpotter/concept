#!/usr/bin/env bash

# This file is part of COùòïCEPT, the cosmological ùòï-body code in Python.
# Copyright ¬© 2015‚Äì2024 Jeppe Mosgaard Dakin.
#
# COùòïCEPT is free software: You can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# COùòïCEPT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with COùòïCEPT. If not, see https://www.gnu.org/licenses/
#
# The author of COùòïCEPT can be contacted at dakin(at)phys.au.dk
# The latest version of COùòïCEPT is available at
# https://github.com/jmd-dk/concept/



# This utility prints out information about snapshots.
# More specifically, it prints the meta data contained in the snapshot
# (everything except the actual component data).



# Absolute paths to this file and its directory
this_file="$(readlink -f "${BASH_SOURCE[0]}")"
this_dir="$(dirname "${this_file}")"

# Source the concept script
source "${this_dir}/../concept"

# Set up error trapping
ctrl_c() {
    trap : 0
    exit 2
}
abort() {
    exit_code=$?
    colorprint "An error occurred while using the \"$(basename "${this_file}")\" utility!" "red"
    exit ${exit_code}
}
if [ "${called_from_concept}" == "True" ]; then
    trap 'ctrl_c' SIGINT
    trap 'abort' EXIT
    set -e
fi

# Use Python's argparse module to handle command-line arguments
together_with_snapshot="__together_with_snapshot__"
argparse_finished="False"
argparse_exit_code=""
args=$("${python}" -B -c "
import argparse, sys
# Setup command-line arguments
parser = argparse.ArgumentParser(
    prog='$(basename "${this_file}")',
    description='run the ${esc_concept} $(basename "${this_file}") utility',
)
parser.add_argument(
    'paths',
    nargs='+',
    help='paths to snapshots or directories of snapshots',
)
parser.add_argument(
    '--generate-param',
    nargs='?',
    help=(
        'generate parameter file(s) from snapshot(s). Where to save '
        'the parameter file(s) can be specified as the value.'
    ),
    const='${together_with_snapshot}',
    default=False,
)
parser.add_argument(
    '--stats',
    help='also compute and print out component statistics',
    default=False,
    action='store_true',
)
# Enables Python to write directly to screen (stderr)
# in case of help request.
stdout = sys.stdout
sys.stdout = sys.stderr
# Now do the actual argument parsing,
# including writing out the help message.
if '${called_from_concept}' == 'True':
    # Called from concept - Throw exception on illegal args
    args = parser.parse_args()
else:
    # Called directly - Allow what appears to be illegal args
    # (these might be known to the concept script).
    args, unknown_args = parser.parse_known_args()
# If the parsed paths argument is a string representation of a Python list,
# use this list as the list of paths directly.
if args.paths[0][0] == '[' and args.paths[0][-1] == ']':
    args.paths = eval(args.paths[0])
# Reset stdout
sys.stdout = stdout
# Print out the arguments.
# These will be captured in the Bash 'args' variable.
print('argparse_finished=True')
for arg, val in vars(args).items():
    if isinstance(val, list):
        print(f'{arg}=({{}})'.format(' '.join([f'\"{el}\"' for el in val])))
    else:
        print(f'{arg}=\"{val}\"')
" "$@" || echo "argparse_exit_code=$?")
# Evaluate the handled arguments into this scope
eval "${args}"
# Exit if argparse exited without finishing
if [ "${argparse_finished}" != "True" ]; then
    if [ -z "${argparse_exit_code}" ]; then
        argparse_exit_code=0
    fi
    if [ ${argparse_exit_code} -eq 0 ]; then
        trap : 0
    fi
    exit ${argparse_exit_code}
fi

# If not called indirectly through the concept script,
# call the concept script now.
if [ "${called_from_concept}" != "True" ]; then
    "${concept}" -u="${this_file}" "$@"
    trap : 0
    exit 0
fi

# If supplied, convert parameter directory to absolute path
# and put it in quotes.
if [ "${generate_param}" != "False" ]; then
    generate_param="'$(absolute_path "${generate_param}" "${workdir}")'"
fi

# If statistics should not be computed,
# do everything locally using one process.
if [ "${stats}" == "False" ]; then
    export CONCEPT_nprocs="1"
    export CONCEPT_local="True"
    export CONCEPT_submit="False"
fi

# Extract information from the given snapshot(s)
launch_utility \
    ""         \
    ""         \
    ""         \
    "
# The special_params dict, specifying details of the utility run
special_params = {
    'special'       : '$(basename "${this_file}")',
    'generate param': ${generate_param},
    'paths'         : $(bash_array2python_list "${paths[@]}"),
    'stats'         : ${stats},
}
# Debugging options
allow_snapshot_multifile_singleload = True
"

# Cleanup and graceful exit
cleanup_empty_tmp
trap : 0

